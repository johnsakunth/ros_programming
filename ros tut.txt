mkdir -p ~/catkin_ws/src
cd ~/catkin_ws/src
catkin_init_workspace
cd ~/catkin_ws
catkin_make

python file 

cd ~/catkin_ws
catkin_create_pkg (my_package) rospy
cd my_package
>>create new python file text of your choice and sace it 
#!/usr/bin/env python
import rospy

chmod +x your_python_file.py
rosrun my_package python_file.py
roslaunch my_package python_launch_file.launch
  

publisher and subscriber

cd ~/catkin_ws
catkin_create_pkg my_package rospy
mkdir -p my_package/scripts

>>create a pyhton file inside scripts my_publisher.py
code:
#!/usr/bin/env python
import rospy
from std_msgs.msg import String
def publisher():
 pub = rospy.Publisher('my_topic', String, queue_size=10)
 rospy.init_node('my_publisher', anonymous=True)
 rate = rospy.Rate(10) # 10hz
 while not rospy.is_shutdown():
 message = "Hello ROS!"
 rospy.loginfo(message)
 pub.publish(message)
 rate.sleep()
if __name__ == '__main__':
 try:
 publisher()
 except rospy.ROSInterruptException:
 pass

chmod +x my_publisher.py

>> create my_subscriber.py
g code:
#!/usr/bin/env python
import rospy
from std_msgs.msg import String
def callback(data):
 rospy.loginfo(rospy.get_caller_id() + "I heard %s", data.data)
def subscriber():
 rospy.init_node('my_subscriber', anonymous=True)
 rospy.Subscriber("my_topic", String, callback)
 rospy.spin()
if __name__ == '__main__':
 try:
 subscriber()
 except rospy.ROSInterruptException:
 pass

chmod +x my_subscriber.py
catkin_make

new terminal :
Source devel/setup.bash
rosrun my_package my_publisher.py
 
new terminal :
Source devel/setup.bash
rosrun my_package my_subscriber.p


opencv ros

Publisher code:
#!/usr/bin/env python3
# Import the necessary libraries
import rospy # Python library for ROS
from sensor_msgs.msg import Image # Image is the message type
from cv_bridge import CvBridge 
import cv2 # OpenCV library
def publish_message():
 pub = rospy.Publisher('video_frames', Image, queue_size=10)
 # Tells rospy the name of the node.
 # Anonymous = True makes sure the node has a unique name. Random
 # numbers are added to the end of the name.
 rospy.init_node('video_pub_py', anonymous=True)
 # Go through the loop 10 times per second
 rate = rospy.Rate(10) # 10hz
 # Create a VideoCapture object
 # The argument '0' gets the default webcam.
 cap = cv2.VideoCapture(0)
 # Used to convert between ROS and OpenCV images
 br = CvBridge()
 # While ROS is still running.
 while not rospy.is_shutdown():
 ret, frame = cap.read()
 if ret == True:
 # Print debugging information to the terminal
 rospy.loginfo('publishing video frame')
 # Publish the image.
 # The 'cv2_to_imgmsg' method converts an OpenCV
 # image to a ROS image message
 image = cv2.putText(frame, 'A', (150,150), cv2.FONT_HERSHEY_SIMPLEX,
1, (255,0, 0), 2, cv2.LINE_AA)
 pub.publish(br.cv2_to_imgmsg(image))
 # Sleep just enough to maintain the desired rate
 rate.sleep()
 
if __name__ == '__main__':
 try:
 publish_message()
 except rospy.ROSInterruptException:
 pass

Subscriber Code:
#!/usr/bin/env python3
# Import the necessary libraries
import rospy # Python library for ROS
from sensor_msgs.msg import Image # Image is the message type
from cv_bridge import CvBridge # Package to convert between ROS and 
OpenCV Images
import cv2 # OpenCV library
def callback(data):
 # Used to convert between ROS and OpenCV images
 br = CvBridge()
 # Output debugging information to the terminal
 rospy.loginfo("receiving video frame")
 
 # Convert ROS Image message to OpenCV image
 current_frame = br.imgmsg_to_cv2(data)
 
 # Display image
 cv2.imshow("camera", current_frame)
 
 cv2.waitKey(1)
 
def receive_message():
 # Tells rospy the name of the node.
 # Anonymous = True makes sure the node has a unique name. Random
 # numbers are added to the end of the name. 
 rospy.init_node('video_sub_py', anonymous=True)
 
 # Node is subscribing to the video_frames topic
 rospy.Subscriber('video_frames', Image, callback)
 # spin() simply keeps python from exiting until this node is stopped
 rospy.spin()
 # Close down the video stream when done
 cv2.destroyAllWindows()
 
if __name__ == '__main__':
 receive_message()


turtle sim 

Roscore
rosrun turtlesim turtlesim_node
rosrun turtlesim turtle_teleop_key





